import networkx as nx
import matplotlib.pyplot as plt

# Create an empty graph
G = nx.Graph()

# Add nodes
G.add_node(1)
G.add_node(2)
G.add_node(3)

# Add edges
G.add_edge(1,2)
G.add_edge(2,3)

# Draw the graph
nx.draw(G, with_labels=True)
plt.show()
#---------------------------------------------

import networkx as nx
import matplotlib.pyplot as plt

# Create an empty graph
G = nx.Graph()

# Add nodes
G.add_nodes_from([1,2,3,4])

# Add edges
G.add_edges_from([(1,2),(2,3),(3,4),(4,1)])

# Draw the graph
nx.draw(G, with_labels=True)
plt.show()
#---------------------------------------------

# Create a directed graph
DG = nx.DiGraph()

# Add nodes and edges
DG.add_nodes_from([1,2,3])
DG.add_edges_from([(1,2),(2,3),(3,1)])

# Draw the directed graph
nx.draw(DG, with_labels=True, node_color='lightblue', arrows = True)
plt.show()
#---------------------------------------------

# Create a graph
G = nx.Graph()

# Add nodes with attributes
G.add_node(1, label='A')
G.add_node(2, label='B')

# Add an edge with a weight attribute
G.add_edge(1,2,weight=4.2)

# Access node attributes
print(G.nodes[1]['label'])

# Access edge attributes
print(G[1][2]['weight'])
#---------------------------------------------

# Create a graph
G = nx.Graph()

# Add nodes and edges
G.add_edges_from([(1,2),(1,3),(2,4),(3,4),(4,5)])

# Find the shortest path between nodes 1 and 5
shortest_path = nx.shortest_path(G, source=1, target=5)
print("Shortest path:", shortest_path)

# Draw the graph
nx.draw(G,with_labels=True)
plt.show()
#---------------------------------------------

# Create a graph
G = nx.Graph()

# Add nodes and edges
G.add_edges_from([(1,2),(1,3),(2,4),(3,4),(4,5)])

# Calculate degree centrality
degree_centrality = nx.degree_centrality(G)
print("Degree centrality:", degree_centrality)
