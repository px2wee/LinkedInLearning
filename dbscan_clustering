import pandas as pd
import random
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.cluster import DBSCAN
from sklearn.metrics import silhouette_score

# Set seed for reproducibility
random.seed(42)
np.random.seed(42)

# Load dataset
df = pd.read_csv("customer_segmentation_dataset.csv")

# Encode categorical variables
label_encoders = {}
categorical_cols = ['gender', 'ever_married', 'graduated', 'profession', 'spending_score']
for col in categorical_cols:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

# Drop ID column for clustering
X = df.drop(columns=['ID'])

# Scale the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Apply DBSCAN clustering
dbscan = DBSCAN(eps=1.5, min_samples=5)
df['cluster'] = dbscan.fit_predict(X_scaled)

# Evaluate clustering
num_clusters = len(set(df['cluster'])) - (1 if -1 in df['cluster'].values else 0)
sil_score = silhouette_score(X_scaled, df['cluster']) if num_clusters > 1 else 'N/A'

print(f"\nNumber of clusters (excluding noise): {num_clusters}")
print("Cluster distribution:")
print(df['cluster'].value_counts())
print(f"Silhouette Score: {sil_score}")
