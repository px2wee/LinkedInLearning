import pandas as pd
import random
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

def generate_dataset(num_rows=1000):
    # Generate continuous independent variables
    data = {
        'Variable_1': [random.uniform(0, 100) for _ in range(num_rows)],
        'Variable_2': [random.uniform(50, 150) for _ in range(num_rows)],
        'Variable_3': [random.uniform(-30, 30) for _ in range(num_rows)],
        'Variable_4': [random.uniform(10, 200) for _ in range(num_rows)],
    }
    
    # Generate a categorical dependent variable with numeric representation
    category_mapping = {'Low': 0, 'Medium': 1, 'High': 2}
    categories = list(category_mapping.keys())
    data['Category'] = [category_mapping[random.choice(categories)] for _ in range(num_rows)]
    
    # Convert to DataFrame
    df = pd.DataFrame(data)
    
    # Save to CSV file
    df.to_csv("generated_dataset.csv", index=False)
    print("Dataset with 1000 rows created and saved as 'generated_dataset.csv'")
    
    return df

def train_classification_model(file_path="generated_dataset.csv"):
    # Load dataset
    df = pd.read_csv(file_path)
    
    # Define features and labels
    X = df[['Variable_1', 'Variable_2', 'Variable_3', 'Variable_4']]
    y = df['Category']
    
    # Split data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    # Train a Random Forest classifier
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    
    # Make predictions
    y_pred = model.predict(X_test)
    
    # Evaluate the model
    accuracy = accuracy_score(y_test, y_pred)
    report = classification_report(y_test, y_pred)
    
    print(f"Model Accuracy: {accuracy:.2f}")
    print("Classification Report:")
    print(report)
    
    return model

if __name__ == "__main__":
    generate_dataset()
    train_classification_model()
